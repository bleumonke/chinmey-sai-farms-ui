---
description: 
globs: 
alwaysApply: true
---
---
description: Comprehensive guidelines for discovering existing components and developing new React components with TypeScript and MUI
globs: "**/*.tsx,**/*.jsx,**/*.ts,**/*.js"
alwaysApply: true
---

# Comprehensive React Component Protocol

## 1. Component Discovery Phase

Before implementing any new UI components or related logic:

- ALWAYS search the codebase for existing components, hooks, utilities, types, or context providers that match or relate to the requested feature.
- Look in relevant project directories like:
  - `/src/components/` (for reusable UI elements)
  - `/src/sections/` (for larger page-specific composition components)
  - `/src/layout/` (for overall page structure components)
  - `/src/hooks/` (for reusable stateful logic)
  - `/src/utils/` (for pure utility functions)
  - `/src/context/` (for shared state management)
  - `/src/types/` (for shared type definitions)
  - `/src/theme/` (for MUI theme configurations and custom styling)
  - `/src/routes/` (for routing definitions)
  - `/src/pages/` (for top-level page components)
  - `/src/auth/` (for authentication-related logic and components)
  - `/src/_mock/` (for mock data and providers, primarily for development/testing)

- Identify both exact matches and elements that could be extended or composed.
- Document findings before suggesting new implementations.

## 2. Implementation Decision Tree

Based on discovery findings:
1. If exact match exists → Use directly with appropriate props/arguments.
2. If similar element exists → Extend or compose.
3. If only partial matches exist → Compose from multiple existing elements.
4. If no suitable elements exist → Create new element following project patterns and place it in the appropriate directory (see Section 4).

## 3. DRY Principle and Project Consistency

- Follow established project patterns for component structure, state management, hook usage, and prop types.
- Maintain consistency with existing architectural decisions (e.g., state management library, routing setup) and coding conventions.
- Extract common functionality into reusable components, hooks, or utilities placed in their respective directories (`/src/components/`, `/src/hooks/`, `/src/utils/`).
- Consider multiple approaches (MUI components, custom hooks, utilities, context) and choose the one that best aligns with existing patterns.

## 4. Code Structure and Location

- Write clear, concise code with well-defined TypeScript interfaces/types.
- **Place new code in the correct directory based on its purpose:**
  - **Reusable UI Components:** `/src/components/`
  - **Page-Specific Compositions:** `/src/sections/` (if applicable)
  - **Layout Components:** `/src/layout/`
  - **Reusable Logic/State:** `/src/hooks/`
  - **Utility Functions:** `/src/utils/`
  - **Global State:** `/src/context/`
  - **Shared Types:** `/src/types/`
  - **Page Views:** `/src/pages/`
  - **Authentication Logic:** `/src/auth/`
- Follow this general component structure:
  ```typescript
  // 1. Imports (group by type: React, MUI, project components, hooks, utils, types)
  import React from 'react';
  import { Box, Typography } from '@mui/material'; // Example MUI
  import { useSpecificHook } from '@/hooks/useSpecificHook'; // Example hook
  import { utilityFunction } from '@/utils/utilityFunction'; // Example util
  import { SpecificComponent } from '@/components/SpecificComponent'; // Example component
  import type { ComponentSpecificProps } from '@/types/componentTypes'; // Example type import

  // 2. Type definitions (export if needed elsewhere)
  export interface MyComponentProps extends ComponentSpecificProps {
    // Well-typed props specific to this component
    label: string;
    onClick: () => void;
  }

  // 3. Component implementation (prefer named exports)
  const MyComponent: React.FC<MyComponentProps> = ({ label, onClick, ...rest }) => {
    const { hookData } = useSpecificHook(); // Example hook usage

    const handleClick = () => {
      utilityFunction(); // Example util usage
      onClick();
    };

    return (
      <Box onClick={handleClick} {...rest}> {/* Pass down other props */}
        <Typography>{label}</Typography>
        {/* Use other components */}
        <SpecificComponent data={hookData} />
      </Box>
    );
  };
   export default MyComponent;
  ```
- Separate concerns appropriately (UI presentation, business logic, data fetching, state management).
- Follow established project conventions for folder structure (e.g., component-specific folders) and naming (e.g., PascalCase for components, camelCase for hooks/functions).

## 5. MUI Usage

- Use MUI components consistently according to the project theme defined in `/src/theme/`.
- Prefer extending MUI components or using the `sx` prop over creating heavily custom components unless necessary.
- Follow established project styling patterns (e.g., direct `sx` prop, `styled-components` if used, theme object usage).
- Maintain consistent styling approaches across components.

## 6. Implementation References

When implementing:
- Always reference discovered components, hooks, utils, etc., with correct import paths (use path aliases like `@/` if configured).
- Explicitly mention where similar patterns were found in the codebase if relevant.
- Match the coding style of existing, well-maintained parts of the codebase.
- Document any significant deviations from existing patterns with clear reasoning.
 